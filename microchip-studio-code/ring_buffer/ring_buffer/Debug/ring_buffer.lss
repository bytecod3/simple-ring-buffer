
ring_buffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc2  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d9  00000000  00000000  00000eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000399  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047b  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00002043  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	a5 c0       	rjmp	.+330    	; 0x1e6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include "ring_buffer.h"


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	ce 5c       	subi	r28, 0xCE	; 206
  a8:	d1 09       	sbc	r29, r1
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	
	ring_buffer test_buffer;
	volatile int read_data = 0;
  b4:	c4 53       	subi	r28, 0x34	; 52
  b6:	df 4f       	sbci	r29, 0xFF	; 255
  b8:	19 82       	std	Y+1, r1	; 0x01
  ba:	18 82       	st	Y, r1
  bc:	cc 5c       	subi	r28, 0xCC	; 204
  be:	d0 40       	sbci	r29, 0x00	; 0
	volatile uint8_t available = 255;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	c2 53       	subi	r28, 0x32	; 50
  c4:	df 4f       	sbci	r29, 0xFF	; 255
  c6:	88 83       	st	Y, r24
  c8:	ce 5c       	subi	r28, 0xCE	; 206
  ca:	d0 40       	sbci	r29, 0x00	; 0
	
	ring_buffer_init(&test_buffer);
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	46 d0       	rcall	.+140    	; 0x15e <ring_buffer_init>
	available = ring_buffer_available(&test_buffer);
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	82 d0       	rcall	.+260    	; 0x1dc <ring_buffer_available>
  d8:	c2 53       	subi	r28, 0x32	; 50
  da:	df 4f       	sbci	r29, 0xFF	; 255
  dc:	88 83       	st	Y, r24
  de:	ce 5c       	subi	r28, 0xCE	; 206
  e0:	d0 40       	sbci	r29, 0x00	; 0
	ring_buffer_put(&test_buffer, 10);
  e2:	6a e0       	ldi	r22, 0x0A	; 10
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	40 d0       	rcall	.+128    	; 0x16c <ring_buffer_put>
	available = ring_buffer_available(&test_buffer);
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	75 d0       	rcall	.+234    	; 0x1dc <ring_buffer_available>
  f2:	c2 53       	subi	r28, 0x32	; 50
  f4:	df 4f       	sbci	r29, 0xFF	; 255
  f6:	88 83       	st	Y, r24
  f8:	ce 5c       	subi	r28, 0xCE	; 206
  fa:	d0 40       	sbci	r29, 0x00	; 0
  fc:	67 e0       	ldi	r22, 0x07	; 7
	ring_buffer_put(&test_buffer, 7);
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	33 d0       	rcall	.+102    	; 0x16c <ring_buffer_put>
	available = ring_buffer_available(&test_buffer);
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	68 d0       	rcall	.+208    	; 0x1dc <ring_buffer_available>
 10c:	c2 53       	subi	r28, 0x32	; 50
 10e:	df 4f       	sbci	r29, 0xFF	; 255
 110:	88 83       	st	Y, r24
 112:	ce 5c       	subi	r28, 0xCE	; 206
 114:	d0 40       	sbci	r29, 0x00	; 0
	read_data = ring_buffer_get(&test_buffer);
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	44 d0       	rcall	.+136    	; 0x1a4 <ring_buffer_get>
 11c:	c4 53       	subi	r28, 0x34	; 52
 11e:	df 4f       	sbci	r29, 0xFF	; 255
 120:	99 83       	std	Y+1, r25	; 0x01
 122:	88 83       	st	Y, r24
 124:	cc 5c       	subi	r28, 0xCC	; 204
 126:	d0 40       	sbci	r29, 0x00	; 0
	available = ring_buffer_available(&test_buffer);
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	57 d0       	rcall	.+174    	; 0x1dc <ring_buffer_available>
 12e:	c2 53       	subi	r28, 0x32	; 50
 130:	df 4f       	sbci	r29, 0xFF	; 255
 132:	88 83       	st	Y, r24
 134:	ce 5c       	subi	r28, 0xCE	; 206
 136:	d0 40       	sbci	r29, 0x00	; 0
	ring_buffer_put(&test_buffer, 45);
 138:	6d e2       	ldi	r22, 0x2D	; 45
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	15 d0       	rcall	.+42     	; 0x16c <ring_buffer_put>
 142:	ce 01       	movw	r24, r28
	available = ring_buffer_available(&test_buffer);	
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	4a d0       	rcall	.+148    	; 0x1dc <ring_buffer_available>
 148:	c2 53       	subi	r28, 0x32	; 50
 14a:	df 4f       	sbci	r29, 0xFF	; 255
 14c:	88 83       	st	Y, r24
 14e:	ce 5c       	subi	r28, 0xCE	; 206
 150:	d0 40       	sbci	r29, 0x00	; 0
 152:	6a e0       	ldi	r22, 0x0A	; 10
	
    while (1) 
    {
		ring_buffer_put(&test_buffer, 10);
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	08 d0       	rcall	.+16     	; 0x16c <ring_buffer_put>
 15c:	fa cf       	rjmp	.-12     	; 0x152 <main+0xb4>

0000015e <ring_buffer_init>:
 15e:	fc 01       	movw	r30, r24
 160:	e8 53       	subi	r30, 0x38	; 56
 */ 

#include "ring_buffer.h"

void ring_buffer_init(ring_buffer* r) {
	r->write_index = 0;
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	10 82       	st	Z, r1
	r->read_index = 0;
 166:	31 96       	adiw	r30, 0x01	; 1
 168:	10 82       	st	Z, r1
 16a:	08 95       	ret

0000016c <ring_buffer_put>:
}

void ring_buffer_put(ring_buffer* r, int d) {
	if(r->write_index == SIZE_OF_BUFFER) {
 16c:	fc 01       	movw	r30, r24
 16e:	e8 53       	subi	r30, 0x38	; 56
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	20 81       	ld	r18, Z
 174:	24 36       	cpi	r18, 0x64	; 100
 176:	09 f4       	brne	.+2      	; 0x17a <ring_buffer_put+0xe>
		r->write_index = 0;
 178:	10 82       	st	Z, r1
	}
	r->buffer[r->write_index++] = d;
 17a:	dc 01       	movw	r26, r24
 17c:	a8 53       	subi	r26, 0x38	; 56
 17e:	bf 4f       	sbci	r27, 0xFF	; 255
 180:	ec 91       	ld	r30, X
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	2e 0f       	add	r18, r30
 186:	2c 93       	st	X, r18
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e8 0f       	add	r30, r24
 190:	f9 1f       	adc	r31, r25
 192:	71 83       	std	Z+1, r23	; 0x01
 194:	60 83       	st	Z, r22
	r->buffer_length++;
 196:	fc 01       	movw	r30, r24
 198:	e6 53       	subi	r30, 0x36	; 54
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 83       	st	Z, r24
 1a2:	08 95       	ret

000001a4 <ring_buffer_get>:
}

int ring_buffer_get(ring_buffer* r) {
 1a4:	9c 01       	movw	r18, r24
	if(r->read_index == SIZE_OF_BUFFER) {
 1a6:	fc 01       	movw	r30, r24
 1a8:	e7 53       	subi	r30, 0x37	; 55
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	84 36       	cpi	r24, 0x64	; 100
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <ring_buffer_get+0x10>
		r->read_index = 0;
 1b2:	10 82       	st	Z, r1
	}
	r->buffer_length--;
 1b4:	f9 01       	movw	r30, r18
 1b6:	e6 53       	subi	r30, 0x36	; 54
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	80 81       	ld	r24, Z
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	80 83       	st	Z, r24
	return r->buffer[r->read_index++];
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	90 81       	ld	r25, Z
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 0f       	add	r24, r25
 1c8:	80 83       	st	Z, r24
 1ca:	e9 2f       	mov	r30, r25
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e2 0f       	add	r30, r18
 1d4:	f3 1f       	adc	r31, r19
}
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	08 95       	ret

000001dc <ring_buffer_available>:

uint8_t ring_buffer_available(ring_buffer* r) {
	return r->buffer_length;
 1dc:	86 53       	subi	r24, 0x36	; 54
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
